
* 从makefile看lua源码结构
** 编译选项
编译具体内容
all:	$(ALL_T)
ALL_T= $(CORE_T) $(LUA_T) $(LUAC_T)
lua需要3个模块来联同编译，CORE_T-lua的核心代码 LUA_T-生成lua可执行程序的代码 LUAC_T-生成luac的代码
*** CORE_T
$(CORE_T): $(CORE_O) $(AUX_O) $(LIB_O)
	$(AR) $@ $?
	$(RANLIB) $@
CORE_T 编译目标名liblua.a,依赖于CORE_O,AUX_O,LIB_O
1. CORE_O
CORE_O=	lapi.o lcode.o lctype.o ldebug.o ldo.o ldump.o lfunc.o lgc.o llex.o \
	lmem.o lobject.o lopcodes.o lparser.o lstate.o lstring.o ltable.o \
	ltm.o lundump.o lvm.o lzio.o ltests.o


2. AUX_O
luaxlib.o
3. LIB_O
LIB_O=	lbaselib.o ldblib.o liolib.o lmathlib.o loslib.o ltablib.o lstrlib.o \
	lutf8lib.o lbitlib.o loadlib.o lcorolib.o linit.o
库文件
*** LUA_T
lua 可执行文件
$(LUA_T): $(LUA_O) $(CORE_T)
$(CC) -o $@ $(
) $(LUA_O) $(CORE_T) $(LIBS) $(MYLIBS) $(DL)
**** lua.o
lua.h和lua.c

*** LUAC_T
$(LUAC_T): $(LUAC_O) $(CORE_T)
$(CC) -o $@ $(MYLDFLAGS) $(LUAC_O) $(CORE_T) $(LIBS) $(MYLIBS)

** lua各文件分析
| lua虚拟机opcode | lvm.c     | luaV |
| lua_state       | lstate.c  | luaE |
| 函数运行        | ldo.c     | luaD |
| function        | lfunc.c   | luaF |
| table           | ltable.c  | luaH |
| string          | lstring.c | luaS |
| Lua object      | lobject.c | luaO |
| meta table      | ltm.c     | luaT |
| 内存管理        | lmem.c    | luaM |
| 带缓冲的流处理  | Lzio.c    | luaZ |
| 垃圾回收        | lgc.c     | luaC |
| 词法分析        | lparser.c | luaY |
| 语法分析        | llex.c    | luaX |
| 生成虚拟机理解的数据 | lcode.c   | luaK |
| 预编译               | ldump.c   | luaU |
| 反预编译             | lundump.c | luaU |


