#+TITLE:lua table
#+AUTHOR:taotanty
#+OPTIONS:^:nil

* 数据结构
#+BEGIN_SRC C
typedef struct Table {
  CommonHeader;
  lu_byte flags;  /* 1<<p means tagmethod(p) is not present */
  lu_byte lsizenode;  /* log2 of size of 'node' array */
  unsigned int sizearray;  /* size of 'array' array */
  TValue *array;  /* array part */
  Node *node;
  Node *lastfree;  /* any free position is before this position */
  struct Table *metatable;
  GCObject *gclist;
} Table;


typedef struct Node {
  TValue i_val;
  TKey i_key;
} Node;


typedef union TKey {
  struct {
    TValuefields;
    int next;  /* for chaining (offset for next node) */
  } nk;
  TValue tvk;
} TKey;
/*lobejct.h:472*/
#+END_SRC


从代码中可以看出来放，Table的数组部分和hash 部分分开了,数组部分仅仅是一个数组长度int sizearray加上一个数组TValue* array;；
而哈希部分,通过Node 指向的内存来实现的，但是注意下，这里指向的内存是TValue and {TValuefields ,int or TValue},仅仅存储了哈希值，
那么哈希对应值去哪里了，暂时未知。
纵观Table的整个结构,它包含了3大块内存，TValue* 数组,存储哈希表的Node链表,以及存储元表的Table链表。

* 创建表
上面提出的问题，哈希对应的值存在哪里，我想通过创建一个Table 应该可以看出来.打开ltable.h和ltable.c，

我在lap.c 找到了创建Table的函数

#+BEGIN_SRC C
LUA_API void lua_createtable (lua_State *L, int narray, int nrec) {
  Table *t;
  lua_lock(L);
  t = luaH_new(L);
  sethvalue(L, L->top, t);
  api_incr_top(L);
  if (narray > 0 || nrec > 0)
    luaH_resize(L, t, narray, nrec);
  luaC_checkGC(L);
  lua_unlock(L);
}
#+END_SRC

逻辑层面上，就是创建一个空表，然后判断参数 数组长度或者哈希长度>0,是的话重新设置表大小。

#+begin_src dot :file createtable.png :cmdline -Kdot -Tpng
digraph G{
    size = "6, 6";//图片大小
    lua_createtable[shape=parallelogram,label="L,array,nrec"];
    lua_createtable->lua_lock;
    lua_lock->luaH_new;
    luaH_new->sethvalue;
    sethvalue->api_incr_top;
    api_incr_top->lua_resize[label="narray>0\n or nrec>0"];
    lua_resize->luaC_checkGC;
    api_incr_top->luaC_checkGC;
    luaC_checkGC->lua_unlock;
    end[shape=box];
    lua_unlock->end;
}
#+end_src

#+RESULTS:
[[file:createtable.png]]

** luaH_new
#+BEGIN_SRC C
LUAI_FUNC Table *luaH_new (lua_State *L);


Table *luaH_new (lua_State *L) {
  GCObject *o = luaC_newobj(L, LUA_TTABLE, sizeof(Table));
  Table *t = gco2t(o);
  t->metatable = NULL;
  t->flags = cast_byte(~0);
  t->array = NULL;
  t->sizearray = 0;
  setnodevector(L, t, 0);
  return t;
}

#+END_SRC

可以看到Table 创建的时候,metatable 为NULL,array 为NULL,哈希表就复杂了,利用函数setnodevector(L,t,0)
#+BEGIN_SRC C
static void setnodevector (lua_State *L, Table *t, unsigned int size) {
  if (size == 0) {  /* no elements to hash part? */
    t->node = cast(Node *, dummynode);  /* use common 'dummynode' */
    t->lsizenode = 0;
    t->lastfree = NULL;  /* signal that it is using dummy node */
  }
  else {
    int i;
    int lsize = luaO_ceillog2(size);
    if (lsize > MAXHBITS)
      luaG_runerror(L, "table overflow");
    size = twoto(lsize);
    t->node = luaM_newvector(L, size, Node);//new  一个大小size，类型Node 的vector
    for (i = 0; i < (int)size; i++) {//对vector 进行初始化
      Node *n = gnode(t, i);
      gnext(n) = 0; //n->i_key.nk.next=0
      setnilvalue(wgkey(n));//&(n)->i_key.nk={NULL}
      setnilvalue(gval(n));//&(n)->i_val={NULL}
    }
    t->lsizenode = cast_byte(lsize);
    t->lastfree = gnode(t, size);  /* all positions are free */
  }
}
#+END_SRC

1. 创建无hash数据的表
直接使用静态常量Node ，不可更改，线程安全
#+BEGIN_SRC C
#define dummynode		(&dummynode_)

static const Node dummynode_ = {
  {NILCONSTANT},  /* value */
  {{NILCONSTANT, 0}}  /* key */
};
#+END_SRC

2. 创建有哈希数据的表

#+BEGIN_SRC C

/*
 ** Computes ceil(log2(x))
 */
int luaO_ceillog2 (unsigned int x) {
  static const lu_byte log_2[256] = {  /* log_2[i] = ceil(log2(i - 1)) */
    0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
    6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
  };
  int l = 0;
  x--;
  while (x >= 256) { l += 8; x >>= 8; }
  return l + log_2[x];
}
#+END_SRC


#+BEGIN_SRC C
#define twoto(x)	(1<<(x))
#define sizenode(t)	(twoto((t)->lsizenode))
#+END_SRC

设置表size，new 一个size 大小的Node 数组,,将hash 表Node* 初始化为空（{NULL}）

** lua_resize
经过new之后产生的其实是一个dummynode,再用lua_resize 就是填充表内存
#+BEGIN_SRC C
void luaH_resize (lua_State *L, Table *t, unsigned int nasize,
                                          unsigned int nhsize) {
  unsigned int i;
  int j;
  unsigned int oldasize = t->sizearray;
  int oldhsize = allocsizenode(t);
  Node *nold = t->node;  /* save old hash ... */
  if (nasize > oldasize)  /* array part must grow? */
    setarrayvector(L, t, nasize);
  /* create new hash part with appropriate size */
  setnodevector(L, t, nhsize);
  if (nasize < oldasize) {  /* array part must shrink? */
    t->sizearray = nasize;
    /* re-insert elements from vanishing slice */
    for (i=nasize; i<oldasize; i++) {
      if (!ttisnil(&t->array[i]))
        luaH_setint(L, t, i + 1, &t->array[i]);
    }
    /* shrink array */
    luaM_reallocvector(L, t->array, oldasize, nasize, TValue);
  }
  /* re-insert elements from hash part */
  for (j = oldhsize - 1; j >= 0; j--) {
    Node *old = nold + j;
    if (!ttisnil(gval(old))) {
      /* doesn't need barrier/invalidate cache, as entry was
         already present in the table */
      setobjt2t(L, luaH_set(L, t, gkey(old)), gval(old));
    }
  }
  if (oldhsize > 0)  /* not the dummy node? */
    luaM_freearray(L, nold, cast(size_t, oldhsize)); /* free old hash */
}


#define gnode(t,i)	(&(t)->node[i])
#define gval(n)		(&(n)->i_val)
#define gnext(n)	((n)->i_key.nk.next)
/* 'const' to avoid wrong writings that can mess up field 'next' */
#define gkey(n)		cast(const TValue*, (&(n)->i_key.tvk))


#define setobj(L,obj1,obj2) \
    { TValue *io1=(obj1); *io1 = *(obj2); \
      (void)L; checkliveness(L,io1); }


/*
 ** beware: when using this function you probably need to check a GC
 ** barrier and invalidate the TM cache.
*/
TValue *luaH_set (lua_State *L, Table *t, const TValue *key) {
  const TValue *p = luaH_get(t, key);
  if (p != luaO_nilobject)
    return cast(TValue *, p);
  else return luaH_newkey(L, t, key);
}
#+END_SRC

#+begin_src dot :file luaH_resize.png :cmdline -Kdot -Tpng
digraph G{
size="6,7";
luaH_resize[shape=parallelogram,label="L,t,nasize\nnhsize"]
luaH_resize->save_old;
judge1[shape=diamond,label="nasize<oldesize"];
save_old->judge1;
resetArrayNode[label="重新设置数组部分"];
judge1->resetArrayNode[label="Y"];
resetArrayNode->setnodevector;
judge1->setnodevector[label="N"];
judge2[shape=diamond,label="nasize<oldsize\n 需要缩小数组部分?"];
setnodevector->judge2;
judge2->shrink_array[label="Y"];
reinsert_hash[label="重新插入hash 部分,原因未知"];
shrink_array->reinsert_hash;
judge2->reinsert_hash[label="N"];
reinsert_hash->judge3;
judge3[shape=diamond,label="旧表是否为dummy"];
judge3->free_oldhash[label="N"];
free_oldhash->end;
end[shape=hexagon];
judge3->end[label="Y"];
}
#+end_src

#+RESULTS:
[[file:luaH_resize]].png


** 小结
luaH_createtable，就是luaH_new 使得tabale 指向dummynode；在luaH_resize 设置内存大小(利用
函setarrayvector创建并初始化数组部分，setnodevec创建并初始化hash部分)
创建一个非空表就是在前面的基础上luaH_resize设定空表的值。
遗留的问题还是存在，值怎么填充的？继续看下去.

* luaH_newkey

* 释放
#+BEGIN_SRC C
LUAI_FUNC void luaH_free (lua_State *L, Table *t);

void luaH_free (lua_State *L, Table *t) {
  if (!isdummy(t))
    luaM_freearray(L, t->node, cast(size_t, sizenode(t)));
  luaM_freearray(L, t->array, t->sizearray);
  luaM_free(L, t);
}
#+END_SRC
